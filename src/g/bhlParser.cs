//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bhl.g by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class bhlParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, NAME=56, ARR=57, OBJ=58, NORMALSTRING=59, 
		INT=60, HEX=61, FLOAT=62, WS=63, NL=64, SINGLE_LINE_COMMENT=65, DELIMITED_COMMENT=66;
	public const int
		RULE_program = 0, RULE_progblock = 1, RULE_imports = 2, RULE_mimport = 3, 
		RULE_decls = 4, RULE_decl = 5, RULE_fnargs = 6, RULE_type = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_newExp = 10, RULE_varDeclareAssign = 11, RULE_statement = 12, 
		RULE_mainIf = 13, RULE_elseIf = 14, RULE_else = 15, RULE_callExp = 16, 
		RULE_chainExp = 17, RULE_staticCallExp = 18, RULE_staticCallItem = 19, 
		RULE_arrAccess = 20, RULE_memberAccess = 21, RULE_callArgs = 22, RULE_callArg = 23, 
		RULE_block = 24, RULE_classDecl = 25, RULE_classEx = 26, RULE_classBlock = 27, 
		RULE_classMember = 28, RULE_enumDecl = 29, RULE_enumBlock = 30, RULE_enumMember = 31, 
		RULE_funcDecl = 32, RULE_funcBlock = 33, RULE_funcLambda = 34, RULE_refName = 35, 
		RULE_retType = 36, RULE_names = 37, RULE_useBlock = 38, RULE_funcParams = 39, 
		RULE_funcParamDeclare = 40, RULE_varsDeclare = 41, RULE_varDeclare = 42, 
		RULE_varsDeclareOrCallExps = 43, RULE_varDeclareOrCallExp = 44, RULE_assignExp = 45, 
		RULE_operatorOr = 46, RULE_operatorAnd = 47, RULE_operatorBitOr = 48, 
		RULE_operatorBitAnd = 49, RULE_operatorComparison = 50, RULE_operatorAddSub = 51, 
		RULE_operatorMulDivMod = 52, RULE_operatorUnary = 53, RULE_isRef = 54, 
		RULE_number = 55, RULE_string = 56, RULE_jsonObject = 57, RULE_jsonEmptyObj = 58, 
		RULE_jsonPair = 59, RULE_jsonArray = 60, RULE_jsonEmptyArr = 61, RULE_jsonValue = 62;
	public static readonly string[] ruleNames = {
		"program", "progblock", "imports", "mimport", "decls", "decl", "fnargs", 
		"type", "explist", "exp", "newExp", "varDeclareAssign", "statement", "mainIf", 
		"elseIf", "else", "callExp", "chainExp", "staticCallExp", "staticCallItem", 
		"arrAccess", "memberAccess", "callArgs", "callArg", "block", "classDecl", 
		"classEx", "classBlock", "classMember", "enumDecl", "enumBlock", "enumMember", 
		"funcDecl", "funcBlock", "funcLambda", "refName", "retType", "names", 
		"useBlock", "funcParams", "funcParamDeclare", "varsDeclare", "varDeclare", 
		"varsDeclareOrCallExps", "varDeclareOrCallExp", "assignExp", "operatorOr", 
		"operatorAnd", "operatorBitOr", "operatorBitAnd", "operatorComparison", 
		"operatorAddSub", "operatorMulDivMod", "operatorUnary", "isRef", "number", 
		"string", "jsonObject", "jsonEmptyObj", "jsonPair", "jsonArray", "jsonEmptyArr", 
		"jsonValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'^'", "'('", "')'", "','", "'null'", "'false'", "'true'", 
		"'eval'", "'new'", "'while'", "'break'", "'return'", "'seq'", "'seq_'", 
		"'paral'", "'paral_all'", "'forever'", "'defer'", "'prio'", "'until_failure'", 
		"'until_failure_'", "'until_success'", "'not'", "'if'", "'else'", "'::'", 
		"'['", "']'", "'.'", "':'", "'{'", "'}'", "'class'", "'enum'", "'='", 
		"'func'", "'use'", "'||'", "'&&'", "'|'", "'&'", "'<'", "'>'", "'<='", 
		"'>='", "'!='", "'=='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'ref'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "ARR", "OBJ", 
		"NORMALSTRING", "INT", "HEX", "FLOAT", "WS", "NL", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhl.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public bhlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(bhlParser.Eof, 0); }
		public ProgblockContext[] progblock() {
			return GetRuleContexts<ProgblockContext>();
		}
		public ProgblockContext progblock(int i) {
			return GetRuleContext<ProgblockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__33) | (1L << T__34) | (1L << T__36) | (1L << NAME))) != 0)) {
				{
				{
				State = 126; progblock();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 132; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgblockContext : ParserRuleContext {
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public ImportsContext imports() {
			return GetRuleContext<ImportsContext>(0);
		}
		public ProgblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_progblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterProgblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitProgblock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgblockContext progblock() {
		ProgblockContext _localctx = new ProgblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_progblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 134; imports();
				}
			}

			State = 137; decls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		public MimportContext[] mimport() {
			return GetRuleContexts<MimportContext>();
		}
		public MimportContext mimport(int i) {
			return GetRuleContext<MimportContext>(i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 4, RULE_imports);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 139; mimport();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MimportContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		public MimportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mimport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterMimport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitMimport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMimport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MimportContext mimport() {
		MimportContext _localctx = new MimportContext(Context, State);
		EnterRule(_localctx, 6, RULE_mimport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(T__0);
			State = 145; Match(NORMALSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclsContext : ParserRuleContext {
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterDecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitDecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclsContext decls() {
		DeclsContext _localctx = new DeclsContext(Context, State);
		EnterRule(_localctx, 8, RULE_decls);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 147; decl();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		public VarDeclareAssignContext varDeclareAssign() {
			return GetRuleContext<VarDeclareAssignContext>(0);
		}
		public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			switch (TokenStream.La(1)) {
			case T__33:
				{
				State = 152; classDecl();
				}
				break;
			case T__36:
				{
				State = 153; funcDecl();
				}
				break;
			case NAME:
				{
				State = 154; varDeclareAssign();
				}
				break;
			case T__34:
				{
				State = 155; enumDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnargsContext : ParserRuleContext {
		public NamesContext names() {
			return GetRuleContext<NamesContext>(0);
		}
		public FnargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFnargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFnargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnargsContext fnargs() {
		FnargsContext _localctx = new FnargsContext(Context, State);
		EnterRule(_localctx, 12, RULE_fnargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__1);
			State = 159; Match(T__2);
			State = 161;
			_la = TokenStream.La(1);
			if (_la==T__54 || _la==NAME) {
				{
				State = 160; names();
				}
			}

			State = 163; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public FnargsContext fnargs() {
			return GetRuleContext<FnargsContext>(0);
		}
		public ITerminalNode ARR() { return GetToken(bhlParser.ARR, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(NAME);
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 166; fnargs();
				}
				break;
			}
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 169; Match(ARR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; exp(0);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 173; Match(T__4);
				State = 174; exp(0);
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpJsonArrContext : ExpContext {
		public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public ExpJsonArrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpJsonArr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpJsonArr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonArr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpOrContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpOrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralFalseContext : ExpContext {
		public ExpLiteralFalseContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLiteralFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLiteralFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNumContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ExpLiteralNumContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLiteralNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLiteralNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCallContext : ExpContext {
		public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		public ExpCallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEvalContext : ExpContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpEvalContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpEval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpEval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralStrContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpLiteralStrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLiteralStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLiteralStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralTrueContext : ExpContext {
		public ExpLiteralTrueContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLiteralTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLiteralTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpJsonObjContext : ExpContext {
		public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		public ExpJsonObjContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpJsonObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpJsonObj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpUnaryContext : ExpContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpUnaryContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNewContext : ExpContext {
		public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public ExpNewContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitAndContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitAndContext operatorBitAnd() {
			return GetRuleContext<OperatorBitAndContext>(0);
		}
		public ExpBitAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpBitAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpBitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNullContext : ExpContext {
		public ExpLiteralNullContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLiteralNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLiteralNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpStaticCallContext : ExpContext {
		public StaticCallExpContext staticCallExp() {
			return GetRuleContext<StaticCallExpContext>(0);
		}
		public ExpStaticCallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpStaticCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpStaticCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpStaticCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeCastContext : ExpContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpTypeCastContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpTypeCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLambdaContext : ExpContext {
		public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		public ExpLambdaContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public ExpAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitOrContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitOrContext operatorBitOr() {
			return GetRuleContext<OperatorBitOrContext>(0);
		}
		public ExpBitOrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpBitOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpBitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpParenContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ChainExpContext[] chainExp() {
			return GetRuleContexts<ChainExpContext>();
		}
		public ChainExpContext chainExp(int i) {
			return GetRuleContext<ChainExpContext>(i);
		}
		public ExpParenContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterExpParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitExpParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ExpLiteralNullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 181; Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new ExpLiteralFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182; Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new ExpLiteralTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183; Match(T__7);
				}
				break;
			case 4:
				{
				_localctx = new ExpLiteralNumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184; number();
				}
				break;
			case 5:
				{
				_localctx = new ExpLiteralStrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185; @string();
				}
				break;
			case 6:
				{
				_localctx = new ExpCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186; callExp();
				}
				break;
			case 7:
				{
				_localctx = new ExpStaticCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187; staticCallExp();
				}
				break;
			case 8:
				{
				_localctx = new ExpJsonObjContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188; jsonObject();
				}
				break;
			case 9:
				{
				_localctx = new ExpJsonArrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189; jsonArray();
				}
				break;
			case 10:
				{
				_localctx = new ExpLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190; funcLambda();
				}
				break;
			case 11:
				{
				_localctx = new ExpTypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191; Match(T__2);
				State = 192; type();
				State = 193; Match(T__3);
				State = 194; exp(12);
				}
				break;
			case 12:
				{
				_localctx = new ExpUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196; operatorUnary();
				State = 197; exp(11);
				}
				break;
			case 13:
				{
				_localctx = new ExpParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 199; Match(T__2);
				State = 200; exp(0);
				State = 201; Match(T__3);
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 202; chainExp();
						}
						} 
					}
					State = 207;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 14:
				{
				_localctx = new ExpEvalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208; Match(T__8);
				State = 209; block();
				}
				break;
			case 15:
				{
				_localctx = new ExpNewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 210; newExp();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpBitAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 213;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 214; operatorBitAnd();
						State = 215; exp(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpBitOrContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 217;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 218; operatorBitOr();
						State = 219; exp(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 221;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 222; operatorMulDivMod();
						State = 223; exp(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 225;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 226; operatorAddSub();
						State = 227; exp(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 229;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 230; operatorComparison();
						State = 231; exp(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 233;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 234; operatorAnd();
						State = 235; exp(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpOrContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 237;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 238; operatorOr();
						State = 239; exp(4);
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewExpContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public NewExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterNewExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitNewExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpContext newExp() {
		NewExpContext _localctx = new NewExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_newExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(T__9);
			State = 247; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareAssignContext : ParserRuleContext {
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public VarDeclareAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarDeclareAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarDeclareAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareAssignContext varDeclareAssign() {
		VarDeclareAssignContext _localctx = new VarDeclareAssignContext(Context, State);
		EnterRule(_localctx, 22, RULE_varDeclareAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; varDeclare();
			State = 251;
			_la = TokenStream.La(1);
			if (_la==T__35) {
				{
				State = 250; assignExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbCallContext : StatementContext {
		public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		public SymbCallContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterSymbCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitSymbCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UntilFailureContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UntilFailureContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterUntilFailure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitUntilFailure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilFailure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnContext : StatementContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ReturnContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UntilSuccessContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UntilSuccessContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterUntilSuccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitUntilSuccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilSuccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Seq_Context : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Seq_Context(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterSeq_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitSeq_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakContext : StatementContext {
		public BreakContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockNestedContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockNestedContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterBlockNested(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitBlockNested(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UntilFailure_Context : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UntilFailure_Context(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterUntilFailure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitUntilFailure_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilFailure_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : StatementContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrioContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PrioContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterPrio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitPrio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public NotContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeverContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeverContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterForever(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitForever(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForever(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclContext : StatementContext {
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public VarDeclContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclAssignContext : StatementContext {
		public VarsDeclareOrCallExpsContext varsDeclareOrCallExps() {
			return GetRuleContext<VarsDeclareOrCallExpsContext>(0);
		}
		public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public DeclAssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterDeclAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitDeclAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParalContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParalContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterParal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitParal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaCallContext : StatementContext {
		public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		public LambdaCallContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterLambdaCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitLambdaCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : StatementContext {
		public MainIfContext mainIf() {
			return GetRuleContext<MainIfContext>(0);
		}
		public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SeqContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SeqContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParalAllContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParalAllContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterParalAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitParalAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParalAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeferContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeferContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterDefer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitDefer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new VarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; varDeclare();
				}
				break;
			case 2:
				_localctx = new DeclAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; varsDeclareOrCallExps();
				State = 255; assignExp();
				}
				break;
			case 3:
				_localctx = new SymbCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; callExp();
				}
				break;
			case 4:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; mainIf();
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 259; elseIf();
						}
						} 
					}
					State = 264;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				State = 266;
				_la = TokenStream.La(1);
				if (_la==T__25) {
					{
					State = 265; @else();
					}
				}

				}
				break;
			case 5:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 268; Match(T__10);
				State = 269; exp(0);
				State = 270; block();
				}
				break;
			case 6:
				_localctx = new BreakContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 272; Match(T__11);
				}
				break;
			case 7:
				_localctx = new ReturnContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 273; Match(T__12);
				State = 275;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 274; explist();
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new SeqContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 277; Match(T__13);
				State = 278; block();
				}
				break;
			case 9:
				_localctx = new Seq_Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 279; Match(T__14);
				State = 280; block();
				}
				break;
			case 10:
				_localctx = new ParalContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 281; Match(T__15);
				State = 282; block();
				}
				break;
			case 11:
				_localctx = new ParalAllContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 283; Match(T__16);
				State = 284; block();
				}
				break;
			case 12:
				_localctx = new ForeverContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 285; Match(T__17);
				State = 286; block();
				}
				break;
			case 13:
				_localctx = new DeferContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 287; Match(T__18);
				State = 288; block();
				}
				break;
			case 14:
				_localctx = new PrioContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 289; Match(T__19);
				State = 290; block();
				}
				break;
			case 15:
				_localctx = new UntilFailureContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 291; Match(T__20);
				State = 292; block();
				}
				break;
			case 16:
				_localctx = new UntilFailure_Context(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 293; Match(T__21);
				State = 294; block();
				}
				break;
			case 17:
				_localctx = new UntilSuccessContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 295; Match(T__22);
				State = 296; block();
				}
				break;
			case 18:
				_localctx = new NotContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 297; Match(T__23);
				State = 298; block();
				}
				break;
			case 19:
				_localctx = new BlockNestedContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 299; block();
				}
				break;
			case 20:
				_localctx = new LambdaCallContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 300; funcLambda();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainIfContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterMainIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitMainIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainIfContext mainIf() {
		MainIfContext _localctx = new MainIfContext(Context, State);
		EnterRule(_localctx, 26, RULE_mainIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__24);
			State = 304; exp(0);
			State = 305; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 28, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(T__25);
			State = 308; Match(T__24);
			State = 309; exp(0);
			State = 310; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 30, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__25);
			State = 313; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExpContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public ChainExpContext[] chainExp() {
			return GetRuleContexts<ChainExpContext>();
		}
		public ChainExpContext chainExp(int i) {
			return GetRuleContext<ChainExpContext>(i);
		}
		public CallExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterCallExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitCallExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallExpContext callExp() {
		CallExpContext _localctx = new CallExpContext(Context, State);
		EnterRule(_localctx, 32, RULE_callExp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(NAME);
			State = 319;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 316; chainExp();
					}
					} 
				}
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainExpContext : ParserRuleContext {
		public CallArgsContext callArgs() {
			return GetRuleContext<CallArgsContext>(0);
		}
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		public ChainExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterChainExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitChainExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainExpContext chainExp() {
		ChainExpContext _localctx = new ChainExpContext(Context, State);
		EnterRule(_localctx, 34, RULE_chainExp);
		try {
			State = 325;
			switch (TokenStream.La(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; callArgs();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; memberAccess();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324; arrAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticCallExpContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public StaticCallItemContext staticCallItem() {
			return GetRuleContext<StaticCallItemContext>(0);
		}
		public StaticCallExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticCallExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterStaticCallExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitStaticCallExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticCallExpContext staticCallExp() {
		StaticCallExpContext _localctx = new StaticCallExpContext(Context, State);
		EnterRule(_localctx, 36, RULE_staticCallExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(NAME);
			State = 328; staticCallItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticCallItemContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public StaticCallItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticCallItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterStaticCallItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitStaticCallItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticCallItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticCallItemContext staticCallItem() {
		StaticCallItemContext _localctx = new StaticCallItemContext(Context, State);
		EnterRule(_localctx, 38, RULE_staticCallItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T__26);
			State = 331; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrAccessContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ArrAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterArrAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitArrAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrAccessContext arrAccess() {
		ArrAccessContext _localctx = new ArrAccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 333; Match(T__27);
			State = 334; exp(0);
			State = 335; Match(T__28);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 42, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(T__29);
			State = 338; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsContext : ParserRuleContext {
		public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		public CallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterCallArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitCallArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsContext callArgs() {
		CallArgsContext _localctx = new CallArgsContext(Context, State);
		EnterRule(_localctx, 44, RULE_callArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(T__2);
			State = 342;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__27) | (1L << T__31) | (1L << T__36) | (1L << T__49) | (1L << T__53) | (1L << T__54) | (1L << NAME) | (1L << ARR) | (1L << OBJ) | (1L << NORMALSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) {
				{
				State = 341; callArg();
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 344; Match(T__4);
				State = 345; callArg();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 351; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public IsRefContext isRef() {
			return GetRuleContext<IsRefContext>(0);
		}
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterCallArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitCallArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(Context, State);
		EnterRule(_localctx, 46, RULE_callArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 353; Match(NAME);
				State = 354; Match(T__30);
				}
				break;
			}
			State = 358;
			_la = TokenStream.La(1);
			if (_la==T__54) {
				{
				State = 357; isRef();
				}
			}

			State = 360; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__31);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__31) | (1L << T__36) | (1L << NAME))) != 0)) {
				{
				{
				State = 363; statement();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 369; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public ClassBlockContext classBlock() {
			return GetRuleContext<ClassBlockContext>(0);
		}
		public ClassExContext classEx() {
			return GetRuleContext<ClassExContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 50, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(T__33);
			State = 372; Match(NAME);
			State = 374;
			_la = TokenStream.La(1);
			if (_la==T__30) {
				{
				State = 373; classEx();
				}
			}

			State = 376; classBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public ClassExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterClassEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitClassEx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassEx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExContext classEx() {
		ClassExContext _localctx = new ClassExContext(Context, State);
		EnterRule(_localctx, 52, RULE_classEx);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__30);
			State = 379; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_classBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(T__31);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NAME) {
				{
				{
				State = 382; classMember();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 388; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 56, RULE_classMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; varDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(T__34);
			State = 393; Match(NAME);
			State = 394; enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(T__31);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 397; enumMember();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NAME );
			State = 402; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(NAME);
			State = 405; Match(T__35);
			State = 406; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 64, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__36);
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 409; retType();
				}
				break;
			}
			State = 412; Match(NAME);
			State = 413; Match(T__2);
			State = 415;
			_la = TokenStream.La(1);
			if (_la==T__54 || _la==NAME) {
				{
				State = 414; funcParams();
				}
			}

			State = 417; Match(T__3);
			State = 418; funcBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFuncBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFuncBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBlockContext funcBlock() {
		FuncBlockContext _localctx = new FuncBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_funcBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncLambdaContext : ParserRuleContext {
		public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public UseBlockContext useBlock() {
			return GetRuleContext<UseBlockContext>(0);
		}
		public ChainExpContext[] chainExp() {
			return GetRuleContexts<ChainExpContext>();
		}
		public ChainExpContext chainExp(int i) {
			return GetRuleContext<ChainExpContext>(i);
		}
		public FuncLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcLambda; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFuncLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFuncLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncLambdaContext funcLambda() {
		FuncLambdaContext _localctx = new FuncLambdaContext(Context, State);
		EnterRule(_localctx, 68, RULE_funcLambda);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(T__36);
			State = 424;
			_la = TokenStream.La(1);
			if (_la==NAME) {
				{
				State = 423; retType();
				}
			}

			State = 426; Match(T__2);
			State = 428;
			_la = TokenStream.La(1);
			if (_la==T__54 || _la==NAME) {
				{
				State = 427; funcParams();
				}
			}

			State = 430; Match(T__3);
			State = 432;
			_la = TokenStream.La(1);
			if (_la==T__37) {
				{
				State = 431; useBlock();
				}
			}

			State = 434; funcBlock();
			State = 438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 435; chainExp();
					}
					} 
				}
				State = 440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public IsRefContext isRef() {
			return GetRuleContext<IsRefContext>(0);
		}
		public RefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterRefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitRefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefNameContext refName() {
		RefNameContext _localctx = new RefNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_refName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = TokenStream.La(1);
			if (_la==T__54) {
				{
				State = 441; isRef();
				}
			}

			State = 444; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetTypeContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public RetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterRetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitRetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetTypeContext retType() {
		RetTypeContext _localctx = new RetTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_retType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; type();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 447; Match(T__4);
				State = 448; type();
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamesContext : ParserRuleContext {
		public RefNameContext[] refName() {
			return GetRuleContexts<RefNameContext>();
		}
		public RefNameContext refName(int i) {
			return GetRuleContext<RefNameContext>(i);
		}
		public NamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_names; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterNames(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitNames(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamesContext names() {
		NamesContext _localctx = new NamesContext(Context, State);
		EnterRule(_localctx, 74, RULE_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; refName();
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 455; Match(T__4);
				State = 456; refName();
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseBlockContext : ParserRuleContext {
		public RefNameContext[] refName() {
			return GetRuleContexts<RefNameContext>();
		}
		public RefNameContext refName(int i) {
			return GetRuleContext<RefNameContext>(i);
		}
		public UseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterUseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitUseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseBlockContext useBlock() {
		UseBlockContext _localctx = new UseBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_useBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(T__37);
			State = 463; Match(T__2);
			State = 464; refName();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 465; Match(T__4);
				State = 466; refName();
				}
				}
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 472; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		public FuncParamDeclareContext[] funcParamDeclare() {
			return GetRuleContexts<FuncParamDeclareContext>();
		}
		public FuncParamDeclareContext funcParamDeclare(int i) {
			return GetRuleContext<FuncParamDeclareContext>(i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFuncParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFuncParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 78, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; funcParamDeclare();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 475; Match(T__4);
				State = 476; funcParamDeclare();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamDeclareContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public IsRefContext isRef() {
			return GetRuleContext<IsRefContext>(0);
		}
		public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public FuncParamDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterFuncParamDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitFuncParamDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamDeclareContext funcParamDeclare() {
		FuncParamDeclareContext _localctx = new FuncParamDeclareContext(Context, State);
		EnterRule(_localctx, 80, RULE_funcParamDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_la = TokenStream.La(1);
			if (_la==T__54) {
				{
				State = 482; isRef();
				}
			}

			State = 485; type();
			State = 486; Match(NAME);
			State = 488;
			_la = TokenStream.La(1);
			if (_la==T__35) {
				{
				State = 487; assignExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsDeclareContext : ParserRuleContext {
		public VarDeclareContext[] varDeclare() {
			return GetRuleContexts<VarDeclareContext>();
		}
		public VarDeclareContext varDeclare(int i) {
			return GetRuleContext<VarDeclareContext>(i);
		}
		public VarsDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarsDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarsDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsDeclareContext varsDeclare() {
		VarsDeclareContext _localctx = new VarsDeclareContext(Context, State);
		EnterRule(_localctx, 82, RULE_varsDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; varDeclare();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 491; Match(T__4);
				State = 492; varDeclare();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public VarDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareContext varDeclare() {
		VarDeclareContext _localctx = new VarDeclareContext(Context, State);
		EnterRule(_localctx, 84, RULE_varDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; type();
			State = 499; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsDeclareOrCallExpsContext : ParserRuleContext {
		public VarDeclareOrCallExpContext[] varDeclareOrCallExp() {
			return GetRuleContexts<VarDeclareOrCallExpContext>();
		}
		public VarDeclareOrCallExpContext varDeclareOrCallExp(int i) {
			return GetRuleContext<VarDeclareOrCallExpContext>(i);
		}
		public VarsDeclareOrCallExpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsDeclareOrCallExps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarsDeclareOrCallExps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarsDeclareOrCallExps(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsDeclareOrCallExps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsDeclareOrCallExpsContext varsDeclareOrCallExps() {
		VarsDeclareOrCallExpsContext _localctx = new VarsDeclareOrCallExpsContext(Context, State);
		EnterRule(_localctx, 86, RULE_varsDeclareOrCallExps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; varDeclareOrCallExp();
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 502; Match(T__4);
				State = 503; varDeclareOrCallExp();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareOrCallExpContext : ParserRuleContext {
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		public VarDeclareOrCallExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareOrCallExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterVarDeclareOrCallExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitVarDeclareOrCallExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareOrCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareOrCallExpContext varDeclareOrCallExp() {
		VarDeclareOrCallExpContext _localctx = new VarDeclareOrCallExpContext(Context, State);
		EnterRule(_localctx, 88, RULE_varDeclareOrCallExp);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; varDeclare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; callExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterAssignExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitAssignExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExpContext assignExp() {
		AssignExpContext _localctx = new AssignExpContext(Context, State);
		EnterRule(_localctx, 90, RULE_assignExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(T__35);
			State = 514; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 92, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 94, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitOrContext : ParserRuleContext {
		public OperatorBitOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorBitOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorBitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitOrContext operatorBitOr() {
		OperatorBitOrContext _localctx = new OperatorBitOrContext(Context, State);
		EnterRule(_localctx, 96, RULE_operatorBitOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitAndContext : ParserRuleContext {
		public OperatorBitAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorBitAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorBitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitAndContext operatorBitAnd() {
		OperatorBitAndContext _localctx = new OperatorBitAndContext(Context, State);
		EnterRule(_localctx, 98, RULE_operatorBitAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 100, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 102, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.La(1);
			if ( !(_la==T__48 || _la==T__49) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 104, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__50) | (1L << T__51) | (1L << T__52))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 106, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			_la = TokenStream.La(1);
			if ( !(_la==T__49 || _la==T__53) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefContext : ParserRuleContext {
		public IsRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterIsRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitIsRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefContext isRef() {
		IsRefContext _localctx = new IsRefContext(Context, State);
		EnterRule(_localctx, 108, RULE_isRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(T__54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(bhlParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(bhlParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 110, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 112, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; Match(NORMALSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectContext : ParserRuleContext {
		public JsonPairContext[] jsonPair() {
			return GetRuleContexts<JsonPairContext>();
		}
		public JsonPairContext jsonPair(int i) {
			return GetRuleContext<JsonPairContext>(i);
		}
		public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public JsonEmptyObjContext jsonEmptyObj() {
			return GetRuleContext<JsonEmptyObjContext>(0);
		}
		public JsonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObject; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectContext jsonObject() {
		JsonObjectContext _localctx = new JsonObjectContext(Context, State);
		EnterRule(_localctx, 114, RULE_jsonObject);
		int _la;
		try {
			State = 556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				_la = TokenStream.La(1);
				if (_la==T__9) {
					{
					State = 538; newExp();
					}
				}

				State = 541; Match(T__31);
				State = 542; jsonPair();
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 543; Match(T__4);
					State = 544; jsonPair();
					}
					}
					State = 549;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 550; Match(T__32);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				_la = TokenStream.La(1);
				if (_la==T__9) {
					{
					State = 552; newExp();
					}
				}

				State = 555; jsonEmptyObj();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyObjContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(bhlParser.OBJ, 0); }
		public JsonEmptyObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyObj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonEmptyObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonEmptyObj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyObjContext jsonEmptyObj() {
		JsonEmptyObjContext _localctx = new JsonEmptyObjContext(Context, State);
		EnterRule(_localctx, 116, RULE_jsonEmptyObj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(OBJ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonPairContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPairContext jsonPair() {
		JsonPairContext _localctx = new JsonPairContext(Context, State);
		EnterRule(_localctx, 118, RULE_jsonPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(NAME);
			State = 561; Match(T__30);
			State = 562; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonArrayContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public JsonEmptyArrContext jsonEmptyArr() {
			return GetRuleContext<JsonEmptyArrContext>(0);
		}
		public JsonArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonArrayContext jsonArray() {
		JsonArrayContext _localctx = new JsonArrayContext(Context, State);
		EnterRule(_localctx, 120, RULE_jsonArray);
		int _la;
		try {
			State = 576;
			switch (TokenStream.La(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; Match(T__27);
				State = 565; jsonValue();
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 566; Match(T__4);
					State = 567; jsonValue();
					}
					}
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 573; Match(T__28);
				}
				break;
			case ARR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575; jsonEmptyArr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyArrContext : ParserRuleContext {
		public ITerminalNode ARR() { return GetToken(bhlParser.ARR, 0); }
		public JsonEmptyArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyArr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonEmptyArr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonEmptyArr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyArrContext jsonEmptyArr() {
		JsonEmptyArrContext _localctx = new JsonEmptyArrContext(Context, State);
		EnterRule(_localctx, 122, RULE_jsonEmptyArr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; Match(ARR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.EnterJsonValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlListener typedListener = listener as IbhlListener;
			if (typedListener != null) typedListener.ExitJsonValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlVisitor<TResult> typedVisitor = visitor as IbhlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 124, RULE_jsonValue);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581; jsonObject();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 582; jsonArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x44");
		sb.Append("\x24C\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x3\x2\a\x2");
		sb.Append("\x82\n\x2\f\x2\xE\x2\x85\v\x2\x3\x2\x3\x2\x3\x3\x5\x3\x8A\n");
		sb.Append("\x3\x3\x3\x3\x3\x3\x4\x6\x4\x8F\n\x4\r\x4\xE\x4\x90\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x6\x6\x6\x97\n\x6\r\x6\xE\x6\x98\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x5\a\x9F\n\a\x3\b\x3\b\x3\b\x5\b\xA4\n\b\x3\b\x3\b\x3");
		sb.Append("\t\x3\t\x5\t\xAA\n\t\x3\t\x5\t\xAD\n\t\x3\n\x3\n\x3\n\a\n\xB2");
		sb.Append("\n\n\f\n\xE\n\xB5\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\a\v\xCE\n\v\f\v\xE\v\xD1\v\v\x3\v\x3\v\x3");
		sb.Append("\v\x5\v\xD6\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xF4\n\v\f\v\xE\v\xF7");
		sb.Append("\v\v\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\xFE\n\r\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x107\n\xE\f\xE\xE\xE\x10A\v\xE");
		sb.Append("\x3\xE\x5\xE\x10D\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3");
		sb.Append("\xE\x5\xE\x116\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x130\n\xE\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x12\x3\x12\a\x12\x140\n\x12\f\x12\xE\x12");
		sb.Append("\x143\v\x12\x3\x13\x3\x13\x3\x13\x5\x13\x148\n\x13\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x159\n\x18\x3\x18");
		sb.Append("\x3\x18\a\x18\x15D\n\x18\f\x18\xE\x18\x160\v\x18\x3\x18\x3\x18");
		sb.Append("\x3\x19\x3\x19\x5\x19\x166\n\x19\x3\x19\x5\x19\x169\n\x19\x3");
		sb.Append("\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x16F\n\x1A\f\x1A\xE\x1A\x172");
		sb.Append("\v\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x179\n\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\x182");
		sb.Append("\n\x1D\f\x1D\xE\x1D\x185\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3");
		sb.Append("\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x6 \x191\n \r \xE \x192\x3");
		sb.Append(" \x3 \x3!\x3!\x3!\x3!\x3\"\x3\"\x5\"\x19D\n\"\x3\"\x3\"\x3\"");
		sb.Append("\x5\"\x1A2\n\"\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x5$\x1AB\n$\x3");
		sb.Append("$\x3$\x5$\x1AF\n$\x3$\x3$\x5$\x1B3\n$\x3$\x3$\a$\x1B7\n$\f$");
		sb.Append("\xE$\x1BA\v$\x3%\x5%\x1BD\n%\x3%\x3%\x3&\x3&\x3&\a&\x1C4\n&");
		sb.Append("\f&\xE&\x1C7\v&\x3\'\x3\'\x3\'\a\'\x1CC\n\'\f\'\xE\'\x1CF\v");
		sb.Append("\'\x3(\x3(\x3(\x3(\x3(\a(\x1D6\n(\f(\xE(\x1D9\v(\x3(\x3(\x3");
		sb.Append(")\x3)\x3)\a)\x1E0\n)\f)\xE)\x1E3\v)\x3*\x5*\x1E6\n*\x3*\x3*");
		sb.Append("\x3*\x5*\x1EB\n*\x3+\x3+\x3+\a+\x1F0\n+\f+\xE+\x1F3\v+\x3,\x3");
		sb.Append(",\x3,\x3-\x3-\x3-\a-\x1FB\n-\f-\xE-\x1FE\v-\x3.\x3.\x5.\x202");
		sb.Append("\n.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3");
		sb.Append("\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37");
		sb.Append("\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x5;\x21E\n;");
		sb.Append("\x3;\x3;\x3;\x3;\a;\x224\n;\f;\xE;\x227\v;\x3;\x3;\x3;\x5;\x22C");
		sb.Append("\n;\x3;\x5;\x22F\n;\x3<\x3<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>");
		sb.Append("\a>\x23B\n>\f>\xE>\x23E\v>\x3>\x3>\x3>\x5>\x243\n>\x3?\x3?\x3");
		sb.Append("@\x3@\x3@\x5@\x24A\n@\x3@\x2\x3\x14\x41\x2\x4\x6\b\n\f\xE\x10");
		sb.Append("\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<");
		sb.Append(">@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x2\a\x3");
		sb.Append("\x2-\x32\x3\x2\x33\x34\x3\x2\x35\x37\x4\x2\x34\x34\x38\x38\x3");
		sb.Append("\x2>@\x267\x2\x83\x3\x2\x2\x2\x4\x89\x3\x2\x2\x2\x6\x8E\x3\x2");
		sb.Append("\x2\x2\b\x92\x3\x2\x2\x2\n\x96\x3\x2\x2\x2\f\x9E\x3\x2\x2\x2");
		sb.Append("\xE\xA0\x3\x2\x2\x2\x10\xA7\x3\x2\x2\x2\x12\xAE\x3\x2\x2\x2");
		sb.Append("\x14\xD5\x3\x2\x2\x2\x16\xF8\x3\x2\x2\x2\x18\xFB\x3\x2\x2\x2");
		sb.Append("\x1A\x12F\x3\x2\x2\x2\x1C\x131\x3\x2\x2\x2\x1E\x135\x3\x2\x2");
		sb.Append("\x2 \x13A\x3\x2\x2\x2\"\x13D\x3\x2\x2\x2$\x147\x3\x2\x2\x2&");
		sb.Append("\x149\x3\x2\x2\x2(\x14C\x3\x2\x2\x2*\x14F\x3\x2\x2\x2,\x153");
		sb.Append("\x3\x2\x2\x2.\x156\x3\x2\x2\x2\x30\x165\x3\x2\x2\x2\x32\x16C");
		sb.Append("\x3\x2\x2\x2\x34\x175\x3\x2\x2\x2\x36\x17C\x3\x2\x2\x2\x38\x17F");
		sb.Append("\x3\x2\x2\x2:\x188\x3\x2\x2\x2<\x18A\x3\x2\x2\x2>\x18E\x3\x2");
		sb.Append("\x2\x2@\x196\x3\x2\x2\x2\x42\x19A\x3\x2\x2\x2\x44\x1A6\x3\x2");
		sb.Append("\x2\x2\x46\x1A8\x3\x2\x2\x2H\x1BC\x3\x2\x2\x2J\x1C0\x3\x2\x2");
		sb.Append("\x2L\x1C8\x3\x2\x2\x2N\x1D0\x3\x2\x2\x2P\x1DC\x3\x2\x2\x2R\x1E5");
		sb.Append("\x3\x2\x2\x2T\x1EC\x3\x2\x2\x2V\x1F4\x3\x2\x2\x2X\x1F7\x3\x2");
		sb.Append("\x2\x2Z\x201\x3\x2\x2\x2\\\x203\x3\x2\x2\x2^\x206\x3\x2\x2\x2");
		sb.Append("`\x208\x3\x2\x2\x2\x62\x20A\x3\x2\x2\x2\x64\x20C\x3\x2\x2\x2");
		sb.Append("\x66\x20E\x3\x2\x2\x2h\x210\x3\x2\x2\x2j\x212\x3\x2\x2\x2l\x214");
		sb.Append("\x3\x2\x2\x2n\x216\x3\x2\x2\x2p\x218\x3\x2\x2\x2r\x21A\x3\x2");
		sb.Append("\x2\x2t\x22E\x3\x2\x2\x2v\x230\x3\x2\x2\x2x\x232\x3\x2\x2\x2");
		sb.Append("z\x242\x3\x2\x2\x2|\x244\x3\x2\x2\x2~\x249\x3\x2\x2\x2\x80\x82");
		sb.Append("\x5\x4\x3\x2\x81\x80\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81");
		sb.Append("\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x86\x3\x2\x2\x2\x85\x83");
		sb.Append("\x3\x2\x2\x2\x86\x87\a\x2\x2\x3\x87\x3\x3\x2\x2\x2\x88\x8A\x5");
		sb.Append("\x6\x4\x2\x89\x88\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3");
		sb.Append("\x2\x2\x2\x8B\x8C\x5\n\x6\x2\x8C\x5\x3\x2\x2\x2\x8D\x8F\x5\b");
		sb.Append("\x5\x2\x8E\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x8E\x3\x2");
		sb.Append("\x2\x2\x90\x91\x3\x2\x2\x2\x91\a\x3\x2\x2\x2\x92\x93\a\x3\x2");
		sb.Append("\x2\x93\x94\a=\x2\x2\x94\t\x3\x2\x2\x2\x95\x97\x5\f\a\x2\x96");
		sb.Append("\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98");
		sb.Append("\x99\x3\x2\x2\x2\x99\v\x3\x2\x2\x2\x9A\x9F\x5\x34\x1B\x2\x9B");
		sb.Append("\x9F\x5\x42\"\x2\x9C\x9F\x5\x18\r\x2\x9D\x9F\x5<\x1F\x2\x9E");
		sb.Append("\x9A\x3\x2\x2\x2\x9E\x9B\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E");
		sb.Append("\x9D\x3\x2\x2\x2\x9F\r\x3\x2\x2\x2\xA0\xA1\a\x4\x2\x2\xA1\xA3");
		sb.Append("\a\x5\x2\x2\xA2\xA4\x5L\'\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3");
		sb.Append("\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\a\x6\x2\x2\xA6\xF\x3\x2");
		sb.Append("\x2\x2\xA7\xA9\a:\x2\x2\xA8\xAA\x5\xE\b\x2\xA9\xA8\x3\x2\x2");
		sb.Append("\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xAD\a;\x2\x2");
		sb.Append("\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x11\x3\x2\x2\x2");
		sb.Append("\xAE\xB3\x5\x14\v\x2\xAF\xB0\a\a\x2\x2\xB0\xB2\x5\x14\v\x2\xB1");
		sb.Append("\xAF\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB3");
		sb.Append("\xB4\x3\x2\x2\x2\xB4\x13\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6");
		sb.Append("\xB7\b\v\x1\x2\xB7\xD6\a\b\x2\x2\xB8\xD6\a\t\x2\x2\xB9\xD6\a");
		sb.Append("\n\x2\x2\xBA\xD6\x5p\x39\x2\xBB\xD6\x5r:\x2\xBC\xD6\x5\"\x12");
		sb.Append("\x2\xBD\xD6\x5&\x14\x2\xBE\xD6\x5t;\x2\xBF\xD6\x5z>\x2\xC0\xD6");
		sb.Append("\x5\x46$\x2\xC1\xC2\a\x5\x2\x2\xC2\xC3\x5\x10\t\x2\xC3\xC4\a");
		sb.Append("\x6\x2\x2\xC4\xC5\x5\x14\v\xE\xC5\xD6\x3\x2\x2\x2\xC6\xC7\x5");
		sb.Append("l\x37\x2\xC7\xC8\x5\x14\v\r\xC8\xD6\x3\x2\x2\x2\xC9\xCA\a\x5");
		sb.Append("\x2\x2\xCA\xCB\x5\x14\v\x2\xCB\xCF\a\x6\x2\x2\xCC\xCE\x5$\x13");
		sb.Append("\x2\xCD\xCC\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2");
		sb.Append("\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD6\x3\x2\x2\x2\xD1\xCF\x3\x2\x2");
		sb.Append("\x2\xD2\xD3\a\v\x2\x2\xD3\xD6\x5\x32\x1A\x2\xD4\xD6\x5\x16\f");
		sb.Append("\x2\xD5\xB6\x3\x2\x2\x2\xD5\xB8\x3\x2\x2\x2\xD5\xB9\x3\x2\x2");
		sb.Append("\x2\xD5\xBA\x3\x2\x2\x2\xD5\xBB\x3\x2\x2\x2\xD5\xBC\x3\x2\x2");
		sb.Append("\x2\xD5\xBD\x3\x2\x2\x2\xD5\xBE\x3\x2\x2\x2\xD5\xBF\x3\x2\x2");
		sb.Append("\x2\xD5\xC0\x3\x2\x2\x2\xD5\xC1\x3\x2\x2\x2\xD5\xC6\x3\x2\x2");
		sb.Append("\x2\xD5\xC9\x3\x2\x2\x2\xD5\xD2\x3\x2\x2\x2\xD5\xD4\x3\x2\x2");
		sb.Append("\x2\xD6\xF5\x3\x2\x2\x2\xD7\xD8\f\v\x2\x2\xD8\xD9\x5\x64\x33");
		sb.Append("\x2\xD9\xDA\x5\x14\v\f\xDA\xF4\x3\x2\x2\x2\xDB\xDC\f\n\x2\x2");
		sb.Append("\xDC\xDD\x5\x62\x32\x2\xDD\xDE\x5\x14\v\v\xDE\xF4\x3\x2\x2\x2");
		sb.Append("\xDF\xE0\f\t\x2\x2\xE0\xE1\x5j\x36\x2\xE1\xE2\x5\x14\v\n\xE2");
		sb.Append("\xF4\x3\x2\x2\x2\xE3\xE4\f\b\x2\x2\xE4\xE5\x5h\x35\x2\xE5\xE6");
		sb.Append("\x5\x14\v\t\xE6\xF4\x3\x2\x2\x2\xE7\xE8\f\a\x2\x2\xE8\xE9\x5");
		sb.Append("\x66\x34\x2\xE9\xEA\x5\x14\v\b\xEA\xF4\x3\x2\x2\x2\xEB\xEC\f");
		sb.Append("\x6\x2\x2\xEC\xED\x5`\x31\x2\xED\xEE\x5\x14\v\a\xEE\xF4\x3\x2");
		sb.Append("\x2\x2\xEF\xF0\f\x5\x2\x2\xF0\xF1\x5^\x30\x2\xF1\xF2\x5\x14");
		sb.Append("\v\x6\xF2\xF4\x3\x2\x2\x2\xF3\xD7\x3\x2\x2\x2\xF3\xDB\x3\x2");
		sb.Append("\x2\x2\xF3\xDF\x3\x2\x2\x2\xF3\xE3\x3\x2\x2\x2\xF3\xE7\x3\x2");
		sb.Append("\x2\x2\xF3\xEB\x3\x2\x2\x2\xF3\xEF\x3\x2\x2\x2\xF4\xF7\x3\x2");
		sb.Append("\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\x15\x3\x2");
		sb.Append("\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xF9\a\f\x2\x2\xF9\xFA\x5\x10");
		sb.Append("\t\x2\xFA\x17\x3\x2\x2\x2\xFB\xFD\x5V,\x2\xFC\xFE\x5\\/\x2\xFD");
		sb.Append("\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x19\x3\x2\x2\x2\xFF");
		sb.Append("\x130\x5V,\x2\x100\x101\x5X-\x2\x101\x102\x5\\/\x2\x102\x130");
		sb.Append("\x3\x2\x2\x2\x103\x130\x5\"\x12\x2\x104\x108\x5\x1C\xF\x2\x105");
		sb.Append("\x107\x5\x1E\x10\x2\x106\x105\x3\x2\x2\x2\x107\x10A\x3\x2\x2");
		sb.Append("\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10C\x3");
		sb.Append("\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x10D\x5 \x11\x2\x10C\x10B");
		sb.Append("\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x130\x3\x2\x2\x2\x10E");
		sb.Append("\x10F\a\r\x2\x2\x10F\x110\x5\x14\v\x2\x110\x111\x5\x32\x1A\x2");
		sb.Append("\x111\x130\x3\x2\x2\x2\x112\x130\a\xE\x2\x2\x113\x115\a\xF\x2");
		sb.Append("\x2\x114\x116\x5\x12\n\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3");
		sb.Append("\x2\x2\x2\x116\x130\x3\x2\x2\x2\x117\x118\a\x10\x2\x2\x118\x130");
		sb.Append("\x5\x32\x1A\x2\x119\x11A\a\x11\x2\x2\x11A\x130\x5\x32\x1A\x2");
		sb.Append("\x11B\x11C\a\x12\x2\x2\x11C\x130\x5\x32\x1A\x2\x11D\x11E\a\x13");
		sb.Append("\x2\x2\x11E\x130\x5\x32\x1A\x2\x11F\x120\a\x14\x2\x2\x120\x130");
		sb.Append("\x5\x32\x1A\x2\x121\x122\a\x15\x2\x2\x122\x130\x5\x32\x1A\x2");
		sb.Append("\x123\x124\a\x16\x2\x2\x124\x130\x5\x32\x1A\x2\x125\x126\a\x17");
		sb.Append("\x2\x2\x126\x130\x5\x32\x1A\x2\x127\x128\a\x18\x2\x2\x128\x130");
		sb.Append("\x5\x32\x1A\x2\x129\x12A\a\x19\x2\x2\x12A\x130\x5\x32\x1A\x2");
		sb.Append("\x12B\x12C\a\x1A\x2\x2\x12C\x130\x5\x32\x1A\x2\x12D\x130\x5");
		sb.Append("\x32\x1A\x2\x12E\x130\x5\x46$\x2\x12F\xFF\x3\x2\x2\x2\x12F\x100");
		sb.Append("\x3\x2\x2\x2\x12F\x103\x3\x2\x2\x2\x12F\x104\x3\x2\x2\x2\x12F");
		sb.Append("\x10E\x3\x2\x2\x2\x12F\x112\x3\x2\x2\x2\x12F\x113\x3\x2\x2\x2");
		sb.Append("\x12F\x117\x3\x2\x2\x2\x12F\x119\x3\x2\x2\x2\x12F\x11B\x3\x2");
		sb.Append("\x2\x2\x12F\x11D\x3\x2\x2\x2\x12F\x11F\x3\x2\x2\x2\x12F\x121");
		sb.Append("\x3\x2\x2\x2\x12F\x123\x3\x2\x2\x2\x12F\x125\x3\x2\x2\x2\x12F");
		sb.Append("\x127\x3\x2\x2\x2\x12F\x129\x3\x2\x2\x2\x12F\x12B\x3\x2\x2\x2");
		sb.Append("\x12F\x12D\x3\x2\x2\x2\x12F\x12E\x3\x2\x2\x2\x130\x1B\x3\x2");
		sb.Append("\x2\x2\x131\x132\a\x1B\x2\x2\x132\x133\x5\x14\v\x2\x133\x134");
		sb.Append("\x5\x32\x1A\x2\x134\x1D\x3\x2\x2\x2\x135\x136\a\x1C\x2\x2\x136");
		sb.Append("\x137\a\x1B\x2\x2\x137\x138\x5\x14\v\x2\x138\x139\x5\x32\x1A");
		sb.Append("\x2\x139\x1F\x3\x2\x2\x2\x13A\x13B\a\x1C\x2\x2\x13B\x13C\x5");
		sb.Append("\x32\x1A\x2\x13C!\x3\x2\x2\x2\x13D\x141\a:\x2\x2\x13E\x140\x5");
		sb.Append("$\x13\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F");
		sb.Append("\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142#\x3\x2\x2\x2\x143\x141");
		sb.Append("\x3\x2\x2\x2\x144\x148\x5.\x18\x2\x145\x148\x5,\x17\x2\x146");
		sb.Append("\x148\x5*\x16\x2\x147\x144\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2");
		sb.Append("\x147\x146\x3\x2\x2\x2\x148%\x3\x2\x2\x2\x149\x14A\a:\x2\x2");
		sb.Append("\x14A\x14B\x5(\x15\x2\x14B\'\x3\x2\x2\x2\x14C\x14D\a\x1D\x2");
		sb.Append("\x2\x14D\x14E\a:\x2\x2\x14E)\x3\x2\x2\x2\x14F\x150\a\x1E\x2");
		sb.Append("\x2\x150\x151\x5\x14\v\x2\x151\x152\a\x1F\x2\x2\x152+\x3\x2");
		sb.Append("\x2\x2\x153\x154\a \x2\x2\x154\x155\a:\x2\x2\x155-\x3\x2\x2");
		sb.Append("\x2\x156\x158\a\x5\x2\x2\x157\x159\x5\x30\x19\x2\x158\x157\x3");
		sb.Append("\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15E\x3\x2\x2\x2\x15A\x15B");
		sb.Append("\a\a\x2\x2\x15B\x15D\x5\x30\x19\x2\x15C\x15A\x3\x2\x2\x2\x15D");
		sb.Append("\x160\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2");
		sb.Append("\x15F\x161\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x162\a\x6");
		sb.Append("\x2\x2\x162/\x3\x2\x2\x2\x163\x164\a:\x2\x2\x164\x166\a!\x2");
		sb.Append("\x2\x165\x163\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x168\x3");
		sb.Append("\x2\x2\x2\x167\x169\x5n\x38\x2\x168\x167\x3\x2\x2\x2\x168\x169");
		sb.Append("\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16B\x5\x14\v\x2\x16B");
		sb.Append("\x31\x3\x2\x2\x2\x16C\x170\a\"\x2\x2\x16D\x16F\x5\x1A\xE\x2");
		sb.Append("\x16E\x16D\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2");
		sb.Append("\x2\x2\x170\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170");
		sb.Append("\x3\x2\x2\x2\x173\x174\a#\x2\x2\x174\x33\x3\x2\x2\x2\x175\x176");
		sb.Append("\a$\x2\x2\x176\x178\a:\x2\x2\x177\x179\x5\x36\x1C\x2\x178\x177");
		sb.Append("\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A");
		sb.Append("\x17B\x5\x38\x1D\x2\x17B\x35\x3\x2\x2\x2\x17C\x17D\a!\x2\x2");
		sb.Append("\x17D\x17E\a:\x2\x2\x17E\x37\x3\x2\x2\x2\x17F\x183\a\"\x2\x2");
		sb.Append("\x180\x182\x5:\x1E\x2\x181\x180\x3\x2\x2\x2\x182\x185\x3\x2");
		sb.Append("\x2\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x186");
		sb.Append("\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x186\x187\a#\x2\x2\x187\x39");
		sb.Append("\x3\x2\x2\x2\x188\x189\x5V,\x2\x189;\x3\x2\x2\x2\x18A\x18B\a");
		sb.Append("%\x2\x2\x18B\x18C\a:\x2\x2\x18C\x18D\x5> \x2\x18D=\x3\x2\x2");
		sb.Append("\x2\x18E\x190\a\"\x2\x2\x18F\x191\x5@!\x2\x190\x18F\x3\x2\x2");
		sb.Append("\x2\x191\x192\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3");
		sb.Append("\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\a#\x2\x2\x195?\x3");
		sb.Append("\x2\x2\x2\x196\x197\a:\x2\x2\x197\x198\a&\x2\x2\x198\x199\a");
		sb.Append(">\x2\x2\x199\x41\x3\x2\x2\x2\x19A\x19C\a\'\x2\x2\x19B\x19D\x5");
		sb.Append("J&\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19E");
		sb.Append("\x3\x2\x2\x2\x19E\x19F\a:\x2\x2\x19F\x1A1\a\x5\x2\x2\x1A0\x1A2");
		sb.Append("\x5P)\x2\x1A1\x1A0\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3");
		sb.Append("\x3\x2\x2\x2\x1A3\x1A4\a\x6\x2\x2\x1A4\x1A5\x5\x44#\x2\x1A5");
		sb.Append("\x43\x3\x2\x2\x2\x1A6\x1A7\x5\x32\x1A\x2\x1A7\x45\x3\x2\x2\x2");
		sb.Append("\x1A8\x1AA\a\'\x2\x2\x1A9\x1AB\x5J&\x2\x1AA\x1A9\x3\x2\x2\x2");
		sb.Append("\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\a\x5");
		sb.Append("\x2\x2\x1AD\x1AF\x5P)\x2\x1AE\x1AD\x3\x2\x2\x2\x1AE\x1AF\x3");
		sb.Append("\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B2\a\x6\x2\x2\x1B1\x1B3");
		sb.Append("\x5N(\x2\x1B2\x1B1\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B4");
		sb.Append("\x3\x2\x2\x2\x1B4\x1B8\x5\x44#\x2\x1B5\x1B7\x5$\x13\x2\x1B6");
		sb.Append("\x1B5\x3\x2\x2\x2\x1B7\x1BA\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2");
		sb.Append("\x1B8\x1B9\x3\x2\x2\x2\x1B9G\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2");
		sb.Append("\x2\x1BB\x1BD\x5n\x38\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3");
		sb.Append("\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\a:\x2\x2\x1BFI\x3");
		sb.Append("\x2\x2\x2\x1C0\x1C5\x5\x10\t\x2\x1C1\x1C2\a\a\x2\x2\x1C2\x1C4");
		sb.Append("\x5\x10\t\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C7\x3\x2\x2\x2\x1C5");
		sb.Append("\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6K\x3\x2\x2\x2\x1C7");
		sb.Append("\x1C5\x3\x2\x2\x2\x1C8\x1CD\x5H%\x2\x1C9\x1CA\a\a\x2\x2\x1CA");
		sb.Append("\x1CC\x5H%\x2\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD");
		sb.Append("\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CEM\x3\x2\x2\x2\x1CF");
		sb.Append("\x1CD\x3\x2\x2\x2\x1D0\x1D1\a(\x2\x2\x1D1\x1D2\a\x5\x2\x2\x1D2");
		sb.Append("\x1D7\x5H%\x2\x1D3\x1D4\a\a\x2\x2\x1D4\x1D6\x5H%\x2\x1D5\x1D3");
		sb.Append("\x3\x2\x2\x2\x1D6\x1D9\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2\x1D7");
		sb.Append("\x1D8\x3\x2\x2\x2\x1D8\x1DA\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2");
		sb.Append("\x1DA\x1DB\a\x6\x2\x2\x1DBO\x3\x2\x2\x2\x1DC\x1E1\x5R*\x2\x1DD");
		sb.Append("\x1DE\a\a\x2\x2\x1DE\x1E0\x5R*\x2\x1DF\x1DD\x3\x2\x2\x2\x1E0");
		sb.Append("\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2");
		sb.Append("\x1E2Q\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E6\x5n\x38\x2");
		sb.Append("\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2");
		sb.Append("\x2\x2\x1E7\x1E8\x5\x10\t\x2\x1E8\x1EA\a:\x2\x2\x1E9\x1EB\x5");
		sb.Append("\\/\x2\x1EA\x1E9\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EBS\x3");
		sb.Append("\x2\x2\x2\x1EC\x1F1\x5V,\x2\x1ED\x1EE\a\a\x2\x2\x1EE\x1F0\x5");
		sb.Append("V,\x2\x1EF\x1ED\x3\x2\x2\x2\x1F0\x1F3\x3\x2\x2\x2\x1F1\x1EF");
		sb.Append("\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2U\x3\x2\x2\x2\x1F3\x1F1");
		sb.Append("\x3\x2\x2\x2\x1F4\x1F5\x5\x10\t\x2\x1F5\x1F6\a:\x2\x2\x1F6W");
		sb.Append("\x3\x2\x2\x2\x1F7\x1FC\x5Z.\x2\x1F8\x1F9\a\a\x2\x2\x1F9\x1FB");
		sb.Append("\x5Z.\x2\x1FA\x1F8\x3\x2\x2\x2\x1FB\x1FE\x3\x2\x2\x2\x1FC\x1FA");
		sb.Append("\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FDY\x3\x2\x2\x2\x1FE\x1FC");
		sb.Append("\x3\x2\x2\x2\x1FF\x202\x5V,\x2\x200\x202\x5\"\x12\x2\x201\x1FF");
		sb.Append("\x3\x2\x2\x2\x201\x200\x3\x2\x2\x2\x202[\x3\x2\x2\x2\x203\x204");
		sb.Append("\a&\x2\x2\x204\x205\x5\x14\v\x2\x205]\x3\x2\x2\x2\x206\x207");
		sb.Append("\a)\x2\x2\x207_\x3\x2\x2\x2\x208\x209\a*\x2\x2\x209\x61\x3\x2");
		sb.Append("\x2\x2\x20A\x20B\a+\x2\x2\x20B\x63\x3\x2\x2\x2\x20C\x20D\a,");
		sb.Append("\x2\x2\x20D\x65\x3\x2\x2\x2\x20E\x20F\t\x2\x2\x2\x20Fg\x3\x2");
		sb.Append("\x2\x2\x210\x211\t\x3\x2\x2\x211i\x3\x2\x2\x2\x212\x213\t\x4");
		sb.Append("\x2\x2\x213k\x3\x2\x2\x2\x214\x215\t\x5\x2\x2\x215m\x3\x2\x2");
		sb.Append("\x2\x216\x217\a\x39\x2\x2\x217o\x3\x2\x2\x2\x218\x219\t\x6\x2");
		sb.Append("\x2\x219q\x3\x2\x2\x2\x21A\x21B\a=\x2\x2\x21Bs\x3\x2\x2\x2\x21C");
		sb.Append("\x21E\x5\x16\f\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2");
		sb.Append("\x21E\x21F\x3\x2\x2\x2\x21F\x220\a\"\x2\x2\x220\x225\x5x=\x2");
		sb.Append("\x221\x222\a\a\x2\x2\x222\x224\x5x=\x2\x223\x221\x3\x2\x2\x2");
		sb.Append("\x224\x227\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2");
		sb.Append("\x2\x2\x226\x228\x3\x2\x2\x2\x227\x225\x3\x2\x2\x2\x228\x229");
		sb.Append("\a#\x2\x2\x229\x22F\x3\x2\x2\x2\x22A\x22C\x5\x16\f\x2\x22B\x22A");
		sb.Append("\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D");
		sb.Append("\x22F\x5v<\x2\x22E\x21D\x3\x2\x2\x2\x22E\x22B\x3\x2\x2\x2\x22F");
		sb.Append("u\x3\x2\x2\x2\x230\x231\a<\x2\x2\x231w\x3\x2\x2\x2\x232\x233");
		sb.Append("\a:\x2\x2\x233\x234\a!\x2\x2\x234\x235\x5~@\x2\x235y\x3\x2\x2");
		sb.Append("\x2\x236\x237\a\x1E\x2\x2\x237\x23C\x5~@\x2\x238\x239\a\a\x2");
		sb.Append("\x2\x239\x23B\x5~@\x2\x23A\x238\x3\x2\x2\x2\x23B\x23E\x3\x2");
		sb.Append("\x2\x2\x23C\x23A\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23F");
		sb.Append("\x3\x2\x2\x2\x23E\x23C\x3\x2\x2\x2\x23F\x240\a\x1F\x2\x2\x240");
		sb.Append("\x243\x3\x2\x2\x2\x241\x243\x5|?\x2\x242\x236\x3\x2\x2\x2\x242");
		sb.Append("\x241\x3\x2\x2\x2\x243{\x3\x2\x2\x2\x244\x245\a;\x2\x2\x245");
		sb.Append("}\x3\x2\x2\x2\x246\x24A\x5\x14\v\x2\x247\x24A\x5t;\x2\x248\x24A");
		sb.Append("\x5z>\x2\x249\x246\x3\x2\x2\x2\x249\x247\x3\x2\x2\x2\x249\x248");
		sb.Append("\x3\x2\x2\x2\x24A\x7F\x3\x2\x2\x2\x35\x83\x89\x90\x98\x9E\xA3");
		sb.Append("\xA9\xAC\xB3\xCF\xD5\xF3\xF5\xFD\x108\x10C\x115\x12F\x141\x147");
		sb.Append("\x158\x15E\x165\x168\x170\x178\x183\x192\x19C\x1A1\x1AA\x1AE");
		sb.Append("\x1B2\x1B8\x1BC\x1C5\x1CD\x1D7\x1E1\x1E5\x1EA\x1F1\x1FC\x201");
		sb.Append("\x21D\x225\x22B\x22E\x23C\x242\x249");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
