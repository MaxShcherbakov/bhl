
async func bool Idle()
{
  bool done = false
  defer {
    if(!done) {
      Trace("Idle interrupted!")
    } else {
      Trace("Idle complete")
    }
  }

  int sec = (int)(1 + Rand() * 3)
  Trace("Idling " + (string)sec + " sec...")

  yield Wait(sec)

  done = true
  return true
}

async func bool FindTarget(ref int target_id)
{
  target_id = 0

  if(Rand() < 0.6) {
    Trace("No target in range")
    return false
  }

  int tmp_target_id = (int)(Rand() * 1000)
  Trace("Found new target " + (string)tmp_target_id + "! Approaching it.")

  int sec = (int)(1 + Rand() * 3)
  yield Wait(sec)
  target_id = tmp_target_id
  return true
}

async func bool AttackTarget(ref int target_id)
{
  if(target_id == 0) {
    return false
  }

  Trace("Attacking target " + (string)target_id + "")
  yield Wait(0.2)
  Trace("Target " + (string)target_id + " is dead!")
  target_id = 0
  return true
}

async func StateChanged(ref int state)
{
  int last_state = state
  yield while(last_state == state)
  Trace("State changed!")
}

async func RandomStateChanger(ref int state)
{
  while(true) {
    yield Wait(1 + Rand() * 4)
    state = state + 1
  }
}

async func Selector([]async func bool() fns) {
  foreach(func bool() fn in fns) {
    if(!yield fn()) {
      continue
    } else {
      break
    }
  }
}

async func Unit() {
  Trace("Unit starts...")

  int state = 0
  int target_id = 0

  paral {
    yield RandomStateChanger(ref state)
    while(true) {
      paral {
        yield StateChanged(ref state)
        yield Selector(
            [
              async func bool() { return yield AttackTarget(ref target_id) }, 
              async func bool() { return yield FindTarget(ref target_id) }, 
              async func bool() { return yield Idle() }
            ]
          )
      }
      yield()
    }
  }
}
